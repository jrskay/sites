<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="utf-8">
    <title>JavaScript</title>

    <link rel="stylesheet" href="css/normalize.min.css">
    <link rel="stylesheet" href="css/font-awesome.min.css">
    <link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Open+Sans">
    <link rel="stylesheet" href="css/magical-slate.css">

    <script src="http://code.jquery.com/jquery-2.1.4.min.js"></script>

    <!-- Classes -->
    <script src="js/classes/ColorPalette.class.js"></script>
    <script src="js/classes/Program.class.js"></script>
    <script src="js/classes/Pen.class.js"></script>
    <script src="js/classes/Slate.class.js"></script>
</head>
<body>
    <h1><i class="fa fa-paint-brush"></i> Ardoise Magique ;-)</h1>

    <main>
        <canvas id="slate" class="slate" width="640" height="480"></canvas>

        <canvas id="slate2" class="slate" width="640" height="480"></canvas>

		<canvas id="color-palette" class="color-palette hide" width="256" height="256"></canvas>
    </main>

    <hr>
    <nav class="toolbar">
        <ul>
            <li>
                <label>Outils</label>
                <button id="tool-clear-canvas" title="Effacer"><i class="fa fa-eraser"></i></button>
                <button id="tool-color-picker" title="Pipette"><i class="fa fa-eyedropper"></i></button>
            </li>
            <li>
                <label>Couleur</label>
                <div class="pen-color black" data-color="black"></div>
                <div class="pen-color maroon" data-color="#5C2121"></div>
                <div class="pen-color red" data-color="#B9121B"></div>
                <div class="pen-color yellow" data-color="#FFBD07"></div>
                <div class="pen-color green" data-color="#13B813"></div>
                <div class="pen-color seagreen" data-color="#029E9A"></div>
                <div class="pen-color blue" data-color="#0378A6"></div>
            </li>
            <li>
                <label>Epaisseur</label>
                <button class="pen-size" data-size="1">Fin</button>
                <button class="pen-size" data-size="2">Normal</button>
                <button class="pen-size" data-size="5">Epais</button>
            </li>
        </ul>
    </nav>

    <!-- Code principal -->
    <script src="js/main.js"></script>
</body>
</html>

<script>

//js/classes/Pen.class.js

var Pen = function()
{
    this.color = 'black';
    this.size  = 1;
};


Pen.prototype.configure = function(context)
{
	context.strokeStyle = this.color;
    context.lineWidth   = this.size;

}

Pen.prototype.setColor= function(color) {

	this.color = color;

}

Pen.prototype.setSize = function(size) {

	this.size = size;
}

Pen.prototype.setColorAsRgb = function(red, green, blue)
{
    this.color = 'rgb(' + red + ',' + green + ',' + blue + ')';
};



//js/classes/Slate.class.js

var Slate = function(idDuDom, pen)
{
	this.canvas          = document.getElementById(idDuDom);
    this.context         = this.canvas.getContext('2d');
    this.currentLocation = null;
    this.isDrawing       = false;
    this.stylo = pen;

    this.canvas.addEventListener('mousemove', this.onMouseMove.bind(this));
	this.canvas.addEventListener('mousedown',  this.onMouseDown.bind(this));
    this.canvas.addEventListener('mouseup',    this.onMouseUp.bind(this));
    this.canvas.addEventListener('mouseleave', this.onMouseLeave.bind(this));

}


Slate.prototype.getMouseLocation = function(event)
{
	var location;
    var rectangle;

    rectangle = this.canvas.getBoundingClientRect();

    location =
    {
    	x: event.clientX - rectangle.left,
    	y: event.clientY - rectangle.top
    }

    return location;

};

Slate.prototype.onMouseMove = function(event)
{
	var location = this.getMouseLocation(event);
    console.log(location);

    if (this.isDrawing == true) {


        this.context.beginPath();

        this.stylo.configure(this.context);
        //this.context.strokeStyle = this.stylo.color; //black
       // this.context.lineWidth   = this.stylo.size; //1
        this.context.moveTo(this.currentLocation.x, this.currentLocation.y);
        this.context.lineTo(location.x, location.y);

        this.context.closePath();

        this.context.stroke();

        this.currentLocation = location;
     }
}

Slate.prototype.onMouseDown = function(event) {

	this.isDrawing = true;

	this.currentLocation = this.getMouseLocation(event);

}

Slate.prototype.onMouseLeave = function()
{

	this.isDrawing = false;
};

Slate.prototype.onMouseUp = function()
{
    this.isDrawing = false;
};

// Program.class.js

var Program = function(IdDuDom) {
	this.colorPalette = new ColorPalette();
	this.pen          = new Pen();
    this.canvas       = new Slate(IdDuDom, this.pen);

	this.penColor = document.querySelectorAll('.pen-color');
    this.penSize = document.querySelectorAll('.pen-size');
	this.clearButton = document.getElementById('tool-clear-canvas');
	this.paletteButton = document.getElementById('tool-color-picker');

}

Program.prototype.onClickColorPicker = function()
{
    $('#color-palette').removeClass('hide');
};



Program.prototype.onClickPenSize = function(event)
{
	var div = event.currentTarget;
    var size = div.dataset.size;

    this.pen.setSize(size);

}

Program.prototype.onClickPenColor = function() {

    var div = event.currentTarget;
    var color = div.dataset.color;
    console.log(color);
    this.pen.setColor(color);

}

Program.prototype.clear = function()
{
    this.canvas.context.clearRect(0, 0, this.canvas.canvas.width, this.canvas.canvas.height);
}

Program.prototype.onPickColor = function() {
	var color =  this.colorPalette.getPickedColor();
	this.pen.setColorAsRgb(color.red, color.green, color.blue);
    $('#color-palette').addClass('hide');
}



Program.prototype.start = function()
{
	for(var i = 0; i < this.penColor.length; i++) {
		this.penColor[i].addEventListener('click', this.onClickPenColor.bind(this) );
	}
    //$('.pen-color').on('click', this.onClickPenColor.bind(this));

    for(var j = 0; j < this.penSize.length; j++) {
		this.penSize[j].addEventListener('click', this.onClickPenSize.bind(this) );
	}

    this.clearButton.addEventListener('click', this.clear.bind(this));
	this.paletteButton.addEventListener('click', this.onClickColorPicker.bind(this));

   	$(document).on('magical-slate:pick-color', this.onPickColor.bind(this));



}


//ColorPalette.class.js

var ColorPalette = function()
{
    this.canvas      = document.getElementById('color-palette');    // Récupération du <canvas>
    this.context     = this.canvas.getContext('2d');
    this.pickedColor = { red: 0, green: 0, blue: 0 };

	this.canvas.addEventListener('click', this.onClick.bind(this));


    this.build();
}


ColorPalette.prototype.build = function()
{
    var gradient;

    gradient = this.context.createLinearGradient(0, 0, this.canvas.width, 0);

    // Dégradé rouge -> vert -> bleu horizontal.
    gradient.addColorStop(0,    'rgb(255,   0,   0)');
    gradient.addColorStop(0.15, 'rgb(255,   0, 255)');
    gradient.addColorStop(0.32, 'rgb(0,     0, 255)');
    gradient.addColorStop(0.49, 'rgb(0,   255, 255)');
    gradient.addColorStop(0.66, 'rgb(0,   255,   0)');
    gradient.addColorStop(0.83, 'rgb(255, 255,   0)');
    gradient.addColorStop(1,    'rgb(255,   0,   0)');

    this.context.fillStyle = gradient;
    this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);


    gradient = this.context.createLinearGradient(0, 0, 0, this.canvas.height);

    // Dégradé blanc opaque -> transparent -> noir opaque vertical.
    gradient.addColorStop(0,   'rgba(255, 255, 255, 1)');
    gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0)');
    gradient.addColorStop(0.5, 'rgba(0,     0,   0, 0)');
    gradient.addColorStop(1,   'rgba(0,     0,   0, 1)');

    this.context.fillStyle = gradient;
    this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
};

ColorPalette.prototype.onClick = function(event)
{
	var rectangle = this.canvas.getBoundingClientRect();
    var x = event.clientX - rectangle.left;
    var y = event.clientY - rectangle.top;

    var palette = this.context.getImageData(x, y, 1, 1);

    console.log(palette);

    this.pickedColor.red   = palette.data[0];
    this.pickedColor.green = palette.data[1];
    this.pickedColor.blue  = palette.data[2];

     /*
     * Déclenchement de l'évènement de l'application,
     * annonçant que l'utilisateur a sélectionné une nouvelle couleur.
     */
    $.event.trigger('magical-slate:pick-color');
};

ColorPalette.prototype.getPickedColor = function()
{
    return this.pickedColor;
};


//js/main.js



var prom = new Program('slate');

prom.start();














</script>
